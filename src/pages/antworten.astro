---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Antworten anzeigen">
  <main>
    <div class="button-container">
      <button class="filter-button" data-type="Feedback">Feedback anzeigen</button>
      <button class="filter-button" data-type="Problem">Problem anzeigen</button>
      <button class="filter-button" data-type="Verbesserungsvorschlag">Verbesserungsvorschläge anzeigen</button>
      <button class="filter-button" data-type="Bewertung">Bewertungen anzeigen</button>
    </div>
    <div id="responses-container">
      <ul id="responses"></ul>
    </div>
    <!-- Der "Zurück zur Seite" Button als Pfeil -->
    <button id="back-button">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 7l-5 5 5 5V7z"/>
      </svg>
      Zurück
    </button>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const responsesContainer = document.getElementById('responses');
    const filterButtons = document.querySelectorAll('.filter-button');
    let messages = JSON.parse(localStorage.getItem('messages')) || [];

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const type = button.getAttribute('data-type');
        displayMessages(type);
      });
    });

    function displayMessages(type) {
      responsesContainer.innerHTML = '';
      const filteredMessages = messages.filter(msg => msg.type === type);

      if (filteredMessages.length === 0) {
        responsesContainer.innerHTML = '<li class="no-messages">Keine Nachrichten vorhanden.</li>';
      } else {
        filteredMessages.forEach((msg) => {
          const messageItem = document.createElement('li');
          messageItem.className = 'message-item';

          const messageDiv = document.createElement('div');
          messageDiv.className = 'message';

          // Titel der Nachricht anzeigen
          const messageTitle = document.createElement('h2');
          messageTitle.textContent = msg.title || msg.type;
          messageDiv.appendChild(messageTitle);

          // Typ der Nachricht anzeigen
          const messageType = document.createElement('p');
          messageType.className = 'message-type';
          messageType.textContent = `Typ: ${msg.type}`;
          messageDiv.appendChild(messageType);

          // Inhalt der Nachricht anzeigen
          const messageContent = document.createElement('p');
          messageContent.textContent = msg.message;
          messageDiv.appendChild(messageContent);

          // Absender der Nachricht anzeigen
          const messageUser = document.createElement('span');
          messageUser.textContent = `Von: ${msg.username || 'Anonym'}`;
          messageDiv.appendChild(messageUser);

          // Antworten der Nachricht anzeigen
          if (msg.replies && msg.replies.length > 0) {
            const repliesDiv = document.createElement('div');
            repliesDiv.className = 'replies';
            msg.replies.forEach(reply => {
              const replyDiv = document.createElement('div');
              replyDiv.className = 'reply';
              replyDiv.textContent = reply;
              repliesDiv.appendChild(replyDiv);
            });
            messageDiv.appendChild(repliesDiv);
          }

          // Button zum Antworten auf eine Nachricht
          const replyButton = document.createElement('button');
          replyButton.textContent = 'Antworten';
          replyButton.className = 'reply-button';
          replyButton.onclick = function() {
            const reply = prompt('Ihre Antwort:');
            if (reply) {
              if (!msg.replies) {
                msg.replies = [];
              }
              msg.replies.push(reply);
              localStorage.setItem('messages', JSON.stringify(messages));
              displayMessages(type);
              alert('Antwort wurde gespeichert!');
            }
          };
          messageDiv.appendChild(replyButton);

          // Button zum Löschen einer Nachricht
          const deleteButton = document.createElement('button');
          deleteButton.className = 'delete-button';
          deleteButton.textContent = 'Löschen';
          deleteButton.onclick = function() {
            if (confirm('Sind Sie sicher, dass Sie diese Nachricht löschen möchten?')) {
              messages = messages.filter(m => m !== msg); // Nachricht aus dem Array entfernen
              localStorage.setItem('messages', JSON.stringify(messages)); // Array speichern
              displayMessages(type); // Seite aktualisieren
              alert('Nachricht wurde gelöscht!');
            }
          };
          messageDiv.appendChild(deleteButton);

          messageItem.appendChild(messageDiv);
          responsesContainer.appendChild(messageItem);
        });
      }
    }

    // Zurück-Button Logik
    const backButton = document.getElementById('back-button');
    backButton.addEventListener('click', () => {
      window.history.back();  // Gehe zur vorherigen Seite
    });

    // Initiale Anzeige der Nachrichten
    displayMessages('Feedback');  // Standardmäßig 'Feedback' anzeigen
  });
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 100%;
    max-width: 900px;
    color: #060606;
    font-size: 16px;
    line-height: 1.5;
    position: relative;
  }

  .button-container {
    display: flex;
    justify-content: space-around;
    margin-bottom: 1rem;
  }

  .filter-button {
    display: inline-block;
    padding: 0.75rem 1.25rem;
    color: #070606;
    text-decoration: none;
    margin: 0 0.5rem;
    background: linear-gradient(to right, rgb(235 239 253), rgb(219 247 248));
    border-radius: 8px;
    box-shadow: 0 2px 4px rgb(179 173 173 / 10%);
    transition: background 0.3s ease, transform 0.3s ease;
  }

  .filter-button:hover {
    background: rgb(254 255 255);
  }

  #responses-container {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 0.5rem;
    background: #f9f9f9;
    max-height: 500px;
    overflow-y: auto;
  }

  #responses {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .message-item {
    border-bottom: 1px solid rgb(0 0 0 / 10%);
    padding: 0.5rem;
  }

  .message-item:last-child {
    border-bottom: none;
  }

  .message {
    padding: 1rem;
    border-radius: 8px;
    background: #fff;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgb(0 0 0 / 10%);
  }

  .message h2 {
    margin: 0;
    font-size: 1.2rem;
    color: #333;
  }

  .message .message-type {
    font-size: 0.9rem;
    color: #888;
  }

  .message p {
    margin: 0.5rem 0;
    color: #555;
  }

  .message span {
    display: block;
    font-size: 0.9rem;
    color: #777;
  }

  .replies {
    margin-top: 1rem;
    padding-left: 1rem;
    border-left: 2px solid #ebdbdb;
  }

  .reply {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: #555;
  }

  .reply-button {
    padding: 0.5rem;
    background: linear-gradient(to right, rgb(233 241 239), rgb(177 228 160));
    color: #070606;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
    margin-top: 1rem;
    transition: background 0.3s ease, transform 0.3s ease;
  }

  .reply-button:hover {
    background: rgb(145 190 130);
  }

  .delete-button {
    background: #e9dad8;
    color: #070606;
    border: none;
    border-radius: 5px;
    padding: 0.75rem 1.5rem;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.3s ease;
    margin-left: 10px;
  }

  .delete-button:hover {
    background: #f1e5e3;
  }

  .no-messages {
    color: #777;
    font-style: italic;
    text-align: center;
    padding: 1rem;
  }

  #back-button {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: linear-gradient(to right, rgb(231 238 231), rgb(13 6 6));
    color: hsl(0deg 7% 3%);
    border: none;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgb(0 0 0 / 10%);
    cursor: pointer;
    transition: background 0.3s ease, transform 0.3s ease;
  }

  #back-button:hover {
    background: rgb(133 130 190);
    transform: translateY(-2px);
  }

  #back-button svg {
    fill: currentcolor;
  }
</style>